;
;// Niki Nezakati - 98522094
;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :  LAB 10
;Version :
;Date    : 5/14/2022
;Author  : Niki Nezakati - 98522094
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdlib.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// Declare your global variables here
;signed char number = 0;
;unsigned char led = 0;
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0027 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0028     if(led == 1)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0029         number+=10;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 002A     else
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 002B         number++;
;PCODE: $00000017 VOL: 0
; 0000 002C }
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0030 {
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0031     if(led == 1)
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0032         number-=10;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0033     else
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0034         number--;
;PCODE: $00000026 VOL: 0
; 0000 0035 }
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;
;// External Interrupt 2 service routine
;interrupt [EXT_INT2] void ext_int2_isr(void)
; 0000 0039 {
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 003A     if(led == 1)
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 003B     {
; 0000 003C         led = 0;
;PCODE: $00000030 VOL: 0
; 0000 003D         PORTC = PORTC & 0b11110111;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 003E     }
; 0000 003F     else
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0040     {
; 0000 0041         led = 1;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0042         PORTC = PORTC | 0b00001000;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0043     }
;PCODE: $00000039 VOL: 0
; 0000 0044 }
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;
;void main(void)
; 0000 0047 {
;PCODE: $0000003D VOL: 0
; 0000 0048 // Declare your local variables here
; 0000 0049 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 004A PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 004B DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 004C PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 004D DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (1<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 004E PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 004F DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0050 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0051 
; 0000 0052 // External Interrupt(s) initialization
; 0000 0053 // INT0: On
; 0000 0054 // INT0 Mode: Falling Edge
; 0000 0055 // INT1: On
; 0000 0056 // INT1 Mode: Falling Edge
; 0000 0057 // INT2: On
; 0000 0058 // INT2 Mode: Falling Edge
; 0000 0059 GICR|=(1<<INT1) | (1<<INT0) | (1<<INT2);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 005A MCUCR=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 005B MCUCSR=(0<<ISC2);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 005C GIFR=(1<<INTF1) | (1<<INTF0) | (1<<INTF2);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 005D 
; 0000 005E // Analog Comparator initialization
; 0000 005F // Analog Comparator: Off
; 0000 0060 // The Analog Comparator's positive input is
; 0000 0061 // connected to the AIN0 pin
; 0000 0062 // The Analog Comparator's negative input is
; 0000 0063 // connected to the AIN1 pin
; 0000 0064 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0065 SFIOR=(0<<ACME);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0066 
; 0000 0067 
; 0000 0068 // Alphanumeric LCD initialization
; 0000 0069 // Connections are specified in the
; 0000 006A // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 006B // RS - PORTC Bit 0
; 0000 006C // RD - PORTC Bit 1
; 0000 006D // EN - PORTC Bit 2
; 0000 006E // D4 - PORTC Bit 4
; 0000 006F // D5 - PORTC Bit 5
; 0000 0070 // D6 - PORTC Bit 6
; 0000 0071 // D7 - PORTC Bit 7
; 0000 0072 // Characters/line: 16
; 0000 0073 lcd_init(16);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0074 
; 0000 0075 // Global enable interrupts
; 0000 0076 #asm("sei")
;PCODE: $0000005D VOL: 0
	sei
;PCODE: $0000005E VOL: 0
; 0000 0077 
; 0000 0078 
; 0000 0079 
; 0000 007A while (1)
;PCODE: $0000005F VOL: 0
; 0000 007B       {
; 0000 007C       // Place your code here
; 0000 007D       char* output = 0;
; 0000 007E       lcd_gotoxy(0,0);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;	*output -> Y+0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 007F       itoa(number,output);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0080       lcd_puts(output);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0081       lcd_puts("  ");
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0082       delay_ms(50);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0083       }
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0084 }
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0

	.DSEG
_0xC:
	.BYTE 0x3
